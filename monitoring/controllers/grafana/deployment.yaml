apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ops-monitoring
  labels: { app: grafana }
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector: { matchLabels: { app: grafana } }
  template:
    metadata: { labels: { app: grafana } }
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports: [{ name: http, containerPort: 3000 }]
          env:
          - { name: TZ, value: Europe/Berlin }
          - { name: GF_INSTALL_PLUGINS, value: grafana-clock-panel }
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef: { name: grafana-admin, key: admin-user }
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef: { name: grafana-admin, key: admin-password }
          - name: GF_METRICS_ENABLED
            value: "true"
          volumeMounts:
            - { name: data, mountPath: /var/lib/grafana }
          readinessProbe:
            httpGet: { path: /api/health, port: http }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /api/health, port: http }
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            requests: { cpu: 200m, memory: 512Mi }
            limits:   { cpu: "2",  memory: 2Gi }
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: grafana-data }
        - name: grafana-datasources
          configMap:
            name: grafana-datasources