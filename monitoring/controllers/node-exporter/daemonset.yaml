apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: ops-monitoring
  labels: { app: node-exporter }
spec:
  selector:
    matchLabels: { app: node-exporter }
  template:
    metadata:
      labels: { app: node-exporter }
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
        - operator: "Exists"
      containers:
        - name: node-exporter
          image: prom/node-exporter:v1.8.2
          imagePullPolicy: IfNotPresent
          args:
            - --web.listen-address=:9100
            - --path.rootfs=/host/root
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|run|var/lib/kubelet/pods|var/lib/containerd|var/lib/docker)($|/)
            - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|cgroup2?|configfs|debugfs|devpts|devtmpfs|hugetlbfs|iso9660|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          ports:
            - name: metrics
              containerPort: 9100
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits: { cpu: 200m, memory: 256Mi }
          volumeMounts:
            - { name: root, mountPath: /host/root, readOnly: true }
            - { name: proc, mountPath: /host/proc, readOnly: true }
            - { name: sys, mountPath: /host/sys, readOnly: true }
      volumes:
        - name: root
          hostPath: { path: /, type: Directory }
        - name: proc
          hostPath: { path: /proc, type: Directory }
        - name: sys
          hostPath: { path: /sys, type: Directory }